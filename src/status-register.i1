;-----------------------------------------------------------------------------
; msp430ucode
; Copyright (c) 2015, Joshua Scoggins
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR 
; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;-----------------------------------------------------------------------------
; Status register related functions
;
; NOTE: bits 9-15 are marked as reserved and aren't extracted!
;-----------------------------------------------------------------------------
.code
;-----------------------------------------------------------------------------
; extractFlagBit: extract a given flag bit
; ?i0 - the shift amount
; ?o0 - the carry flag value
; 
; NOTE: should not be called by functions outside this file, this is a fragment
;       of a function that the other extract functions jump to after setting up
;       arguments.
;-----------------------------------------------------------------------------
extractFlagBit:
	shiftright ?o0 = ?status, ?i0        ; shift right
	and ?o0 = ?o0, ?single-bit-mask      ; and mask it
	return                               ; return to original caller
;-----------------------------------------------------------------------------
; extractCarryFlag: extract the carry flag bit
; takes in no input
; ?o0 - the carry flag value
;-----------------------------------------------------------------------------
extractCarryFlag:
	and ?o0 = ?status, ?single-bit-mask  ; mask it with 0x1
	return

;-----------------------------------------------------------------------------
; extractZeroFlag: extract the zero flag bit
; takes in no input
; ?o0 - the zero flag value
;-----------------------------------------------------------------------------
extractZeroFlag:
	move ?i0 = ?one
	branch extractFlagBit

;-----------------------------------------------------------------------------
; extractNegativeFlag: extract the negative flag bit
; takes in no input
; ?o0 - the negative flag value
;-----------------------------------------------------------------------------
extractNegativeFlag:
	move ?i0 = ?two
	branch extractFlagBit

;-----------------------------------------------------------------------------
; extractOverflowFlag: extract the overflow flag bit
; takes in no input
; ?o0 - the overflow flag value
;-----------------------------------------------------------------------------
extractOverflowFlag:
	set ?i0 = #8
	branch extractFlagBit

;-----------------------------------------------------------------------------
; extractSG0Flag: extract the SG0 flag bit
; takes in no input
; ?o0 - the SG0 flag value
;-----------------------------------------------------------------------------
extractSG0Flag:
	move ?i0 = ?six
	branch extractFlagBit

;-----------------------------------------------------------------------------
; extractSG1Flag: extract the SG1 flag bit
; takes in no input
; ?o0 - the SG1 flag value
;-----------------------------------------------------------------------------
extractSG1Flag:
	move ?i0 = ?seven
	branch extractFlagBit


;-----------------------------------------------------------------------------
; extractOscillatorFlag: extract the Oscillator flag bit
; takes in no input
; ?o0 - the Oscillator flag value
;-----------------------------------------------------------------------------
extractOscillatorFlag:
	move ?i0 = ?five
	branch extractFlagBit

;-----------------------------------------------------------------------------
; extractCpuOffFlag: extract the CpuOff flag bit
; takes in no input
; ?o0 - the CpuOff flag value
;-----------------------------------------------------------------------------
extractCpuOffFlag:
	move ?i0 = ?four
	branch extractFlagBit

;-----------------------------------------------------------------------------
; extractGlobalInterruptEnableFlag: extract the GlobalInterruptEnable flag bit
; takes in no input
; ?o0 - the GlobalInterruptEnable flag value
;-----------------------------------------------------------------------------
extractGlobalInterruptEnableFlag:
	move ?i0 = ?three
	branch extractFlagBit


;-----------------------------------------------------------------------------
; setFlagBit: extract a given flag bit
; ?i0 - bit value
; ?i1 - the position of the bit
; 
; NOTE: should not be called by functions outside this file, this is a fragment
;       of a function that the other extract functions jump to after setting up
;       arguments.
;-----------------------------------------------------------------------------
setFlagBit:
	push ?micro-pred
	gt ?micro-pred = ?i1, ?fifteen            ; terminate execution if the position of the bit is greater than 15
	branch ucode_panic if ?micro-pred         ;
	push ?l0                                  ; save l0
	push ?l1                                  ; save l1
	set ?l0 = singleBitPatternMasks           ; load the address of the single bit patterns in ucode memory
	add ?l0 = ?l0, ?i1                        ; combine the base address with the offset
	load ?l1 = ?l0                            ; load the given value into ?l1
	and ?status = ?status, ?l1                ; mask the status register
	eq ?micro-pred = ?i0, ?zero               ; check and see if the bit value is zero
	branch setFlagBit_Done if ?micro-pred     ; if ?i0 is zero then we're done after the mask
	set ?l0 = singleBitPatterns               ; load the corresponding bit pattern
	add ?l0 = ?l0, ?i1                        ; get the offset
	load ?l1 = ?l0                            ; load the pattern
	or ?status = ?status, ?l1                 ; or the bit pattern with the status register
setFlagBit_Done:
	pop ?l1                                   ; restore l1
	pop ?l0                                   ; restore l0
	pop ?micro-pred                           ; restore the predicate
	return
.microcode
singleBitPatternMasks:
	.word #b1111111111111110
	.word #b1111111111111101
	.word #b1111111111111011
	.word #b1111111111110111
	.word #b1111111111101111
	.word #b1111111111011111
	.word #b1111111110111111
	.word #b1111111101111111
	.word #b1111111011111111
	.word #b1111110111111111
	.word #b1111101111111111
	.word #b1111011111111111
	.word #b1110111111111111
	.word #b1101111111111111
	.word #b1011111111111111
	.word #b0111111111111111

singleBitPatterns:
	.word #b0000000000000001
	.word #b0000000000000010
	.word #b0000000000000100
	.word #b0000000000001000
	.word #b0000000000010000
	.word #b0000000000100000
	.word #b0000000001000000
	.word #b0000000010000000
	.word #b0000000100000000
	.word #b0000001000000000
	.word #b0000010000000000
	.word #b0000100000000000
	.word #b0001000000000000
	.word #b0010000000000000
	.word #b0100000000000000
	.word #b1000000000000000

.code
;-----------------------------------------------------------------------------
; setCarryFlag: set the carry flag bit
; ?i0 - bit value
;-----------------------------------------------------------------------------
setCarryFlag:
	move ?i1 = ?zero
	branch setFlagBit

;-----------------------------------------------------------------------------
; setZeroFlag: set the zero flag bit
;-----------------------------------------------------------------------------
setZeroFlag:
	move ?i1 = ?one
	branch setFlagBit

;-----------------------------------------------------------------------------
; setNegativeFlag: set the negative flag bit
; i0 - bit value
;-----------------------------------------------------------------------------
setNegativeFlag:
	move ?i1 = ?two
	branch setFlagBit

;-----------------------------------------------------------------------------
; setOverflowFlag: set the overflow flag bit
; i0 - bit value
;-----------------------------------------------------------------------------
setOverflowFlag:
	set ?i1 = #8
	branch setFlagBit

;-----------------------------------------------------------------------------
; setSG0Flag: set the SG0 flag bit
; i0 - bit value
;-----------------------------------------------------------------------------
setSG0Flag:
	move ?i1 = ?six
	branch setFlagBit

;-----------------------------------------------------------------------------
; setSG1Flag: set the SG1 flag bit
; i0 - bit value
;-----------------------------------------------------------------------------
setSG1Flag:
	move ?i1 = ?seven
	branch setFlagBit


;-----------------------------------------------------------------------------
; setOscillatorFlag: set the Oscillator flag bit
; i0 - bit value
;-----------------------------------------------------------------------------
setOscillatorFlag:
	move ?i1 = ?five
	branch setFlagBit

;-----------------------------------------------------------------------------
; setCpuOffFlag: set the CpuOff flag bit
; i0 - bit value
;-----------------------------------------------------------------------------
setCpuOffFlag:
	move ?i1 = ?four
	branch setFlagBit

;-----------------------------------------------------------------------------
; setGlobalInterruptEnableFlag: set the GlobalInterruptEnable flag bit
; i0 - bit value
;-----------------------------------------------------------------------------
setGlobalInterruptEnableFlag:
	move ?i1 = ?three
	branch setFlagBit
