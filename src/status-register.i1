;-----------------------------------------------------------------------------
; msp430ucode
; Copyright (c) 2015, Joshua Scoggins
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR 
; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;-----------------------------------------------------------------------------
; Status register related functions
;
; NOTE: bits 9-15 are marked as reserved and aren't extracted!
;-----------------------------------------------------------------------------
.code
;-----------------------------------------------------------------------------
; extractFlagBit: extract a given flag bit
; ?i0 - the shift amount
; ?o0 - the carry flag value
; 
; NOTE: should not be called by functions outside this file, this is a fragment
;       of a function that the other extract functions jump to after setting up
;       arguments.
;-----------------------------------------------------------------------------
extractFlagBit:
	shiftright ?o0 = ?status, ?i0        ; shift right
	and ?o0 = ?o0, ?single-bit-mask      ; and mask it
	return                               ; return to original caller
;-----------------------------------------------------------------------------
; extractCarryFlag: extract the carry flag bit
; takes in no input
; ?o0 - the carry flag value
;-----------------------------------------------------------------------------
extractCarryFlag:
	and ?o0 = ?status, ?single-bit-mask  ; mask it with 0x1
	return

;-----------------------------------------------------------------------------
; extractZeroFlag: extract the zero flag bit
; takes in no input
; ?o0 - the zero flag value
;-----------------------------------------------------------------------------
extractZeroFlag:
	move ?i0 = ?one
	branch extractFlagBit

;-----------------------------------------------------------------------------
; extractNegativeFlag: extract the negative flag bit
; takes in no input
; ?o0 - the negative flag value
;-----------------------------------------------------------------------------
extractNegativeFlag:
	move ?i0 = ?two
	branch extractFlagBit

;-----------------------------------------------------------------------------
; extractOverflowFlag: extract the overflow flag bit
; takes in no input
; ?o0 - the overflow flag value
;-----------------------------------------------------------------------------
extractOverflowFlag:
	set ?i0 = #8
	branch extractFlagBit

;-----------------------------------------------------------------------------
; extractSG0Flag: extract the SG0 flag bit
; takes in no input
; ?o0 - the SG0 flag value
;-----------------------------------------------------------------------------
extractSG0Flag:
	move ?i0 = ?six
	branch extractFlagBit

;-----------------------------------------------------------------------------
; extractSG1Flag: extract the SG1 flag bit
; takes in no input
; ?o0 - the SG1 flag value
;-----------------------------------------------------------------------------
extractSG1Flag:
	move ?i0 = ?seven
	branch extractFlagBit


;-----------------------------------------------------------------------------
; extractOscillatorFlag: extract the Oscillator flag bit
; takes in no input
; ?o0 - the Oscillator flag value
;-----------------------------------------------------------------------------
extractOscillatorFlag:
	move ?i0 = ?five
	branch extractFlagBit

;-----------------------------------------------------------------------------
; extractCpuOffFlag: extract the CpuOff flag bit
; takes in no input
; ?o0 - the CpuOff flag value
;-----------------------------------------------------------------------------
extractCpuOffFlag:
	move ?i0 = ?four
	branch extractFlagBit

;-----------------------------------------------------------------------------
; extractGlobalInterruptEnableFlag: extract the GlobalInterruptEnable flag bit
; takes in no input
; ?o0 - the GlobalInterruptEnable flag value
;-----------------------------------------------------------------------------
extractGlobalInterruptEnableFlag:
	move ?i0 = ?three
	branch extractFlagBit


;-----------------------------------------------------------------------------
; setFlagBit: extract a given flag bit
; ?i0 - the position of the bit
; ?i1 - bit value
; 
; NOTE: should not be called by functions outside this file, this is a fragment
;       of a function that the other extract functions jump to after setting up
;       arguments.
;-----------------------------------------------------------------------------
setFlagBit:
	push ?l0                                  ; save l0
	push ?l1                                  ; save l1
	push ?l2                                  ; save l2
	shiftleft ?l0 = ?single-bit-mask, ?i0     ; construct the bit mask
	not ?l0 = ?l0                             ; invert the mask
	shiftleft ?l1 = ?i1, ?i0                  ; shift the value to the corresponding position
	and ?l2 = ?status, ?l0                    ; clear out the target bit from status
	                                          ; but store the result in a different register
	or ?status = ?l2, ?l1                     ; or the new value together with rest of the staus bit, 
	                                          ; updating the status register in the process
	pop ?l2                                   ; restore l2
	pop ?l1                                   ; restore l1
	pop ?l0                                   ; restore l0
	return

