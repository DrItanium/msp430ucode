;-----------------------------------------------------------------------------
; msp430ucode
; Copyright (c) 2015, Joshua Scoggins
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR 
; ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;-----------------------------------------------------------------------------
; Decoder logic
;-----------------------------------------------------------------------------
.code
;-----------------------------------------------------------------------------
; loadRegisterContents
; ?i0 - register index
; ?o0 - contents of said register
; 
; Providing an illegal index will result in ucode_panic being called
;-----------------------------------------------------------------------------
loadRegisterContents:
	push ?micro-pred
	move ?l0 = ?i0
	set ?l1 = #16
	set ?l2 = msp430RegisterTable
	ge ?micro-pred = ?l0, ?l1
	branch ucode_panic if ?micro-pred
	add ?l3 = ?l2, ?l0
	load ?l4 = ?l3
	branch ?l4
loadRegisterContents_register0:
	move ?o0 = ?m0
	branch loadRegisterContents_Done
loadRegisterContents_register1:
	move ?o0 = ?m1
	branch loadRegisterContents_Done
loadRegisterContents_register2:
	move ?o0 = ?m2
	branch loadRegisterContents_Done
loadRegisterContents_register3:
	move ?o0 = ?m3
	branch loadRegisterContents_Done
loadRegisterContents_register4:
	move ?o0 = ?m4
	branch loadRegisterContents_Done
loadRegisterContents_register5:
	move ?o0 = ?m5
	branch loadRegisterContents_Done
loadRegisterContents_register6:
	move ?o0 = ?m6
	branch loadRegisterContents_Done
loadRegisterContents_register7:
	move ?o0 = ?m7
	branch loadRegisterContents_Done
loadRegisterContents_register8:
	move ?o0 = ?m8
	branch loadRegisterContents_Done
loadRegisterContents_register9:
	move ?o0 = ?m9
	branch loadRegisterContents_Done
loadRegisterContents_register10:
	move ?o0 = ?m10
	branch loadRegisterContents_Done
loadRegisterContents_register11:
	move ?o0 = ?m11
	branch loadRegisterContents_Done
loadRegisterContents_register12:
	move ?o0 = ?m12
	branch loadRegisterContents_Done
loadRegisterContents_register13:
	move ?o0 = ?m13
	branch loadRegisterContents_Done
loadRegisterContents_register14:
	move ?o0 = ?m14
	branch loadRegisterContents_Done
loadRegisterContents_register15:
	move ?o0 = ?m15
loadRegisterContents_Done:
	pop ?micro-pred
	return
.microcode
; setup a load table
msp430RegisterTable:
	.word loadRegisterContents_register0:
	.word loadRegisterContents_register1:
	.word loadRegisterContents_register2:
	.word loadRegisterContents_register3:
	.word loadRegisterContents_register4:
	.word loadRegisterContents_register5:
	.word loadRegisterContents_register6:
	.word loadRegisterContents_register7:
	.word loadRegisterContents_register8:
	.word loadRegisterContents_register9:
	.word loadRegisterContents_register10:
	.word loadRegisterContents_register11:
	.word loadRegisterContents_register12:
	.word loadRegisterContents_register13:
	.word loadRegisterContents_register14:
	.word loadRegisterContents_register15:
.code
load_instruction_from_memory:
	load ?currinst = ?pc, data				; load the current instruction into the currinst register
	and ?prefix = ?currinst, ?prefix-mask
	shiftright ?prefix = ?prefix, #13
	eq ?micro-pred = ?prefix, ?zero
	branch single_operand_arithmetic if ?micro-pred
	eq ?micro-pred = ?prefix, ?one
	branch conditional_jump if ?micro-pred
	branch two_operand_arithmetic
single_operand_arithmetic:
	and ?prefix = ?currinst, ?single-operand-arithmetic-check-mask        ; check and make sure that the value is one in this mask (reuse prefix)
	shiftright ?prefix = ?prefix, #10			                          ; shift right it by 10 bits
	ne ?micro-pred = ?prefix, ?one                                        ; make sure that this prefix is one
	branch illegal_operation if ?micro-pred						          ; If it isn't then get out of there and terminate!
	and ?opcode = ?currinst, ?opcode-mask-single-operand-arithmetic       ; extract the opcode bits out
	shiftright ?opcode = ?opcode, #7								      ; 
	and ?bw = ?currinst, ?bw-mask                                         ; extract the BW bit
	shiftright ?bw = ?bw, #6                                              ; shift 6 bits to the right
	and ?addr-mode = ?currinst, ?as-mask                                  ; extract the as bits
	shiftright ?addr-mode = ?addr-mode, #4                                ; 
	and ?register = ?currinst, ?register-single-operand-arithmetic-mask   ; extract the target register
												   						  ; Determine the kind of instruction from the opcode
	set ?l0 = single_operand_arithmetic_table                             ; Compute table offset
	add ?l1 = ?l0, ?opcode                                                ;
	load ?l2 = ?l1, microcode                                             ; load the address
	branch ?l2															  ;
conditional_jump:
	and ?opcode = ?currinst, ?condition-mask                              ; extract the condition/opcode
	shiftright ?opcode = ?opcode, #10                                     ;
	and ?condition = ?currinst, ?signed-offset-mask                       ; extract the signed offset (immediate)
																		  ; 
	set ?l0 = conditional_jump_table                                      ; Compute table offset
	add ?l1 = ?l0, ?condition                                             ;
	load ?l2 = ?l1, microcode                                             ; load address
	branch ?l2                                                            ; jump to target address
two_operand_arithmetic:
	
;-----------------------------------------------------------------------------
; Single argument operand instructions
;-----------------------------------------------------------------------------
rotate_right_carry:
swap_bytes:
rotate_right_arithmetic:
sign_extend_byte_to_word:
push_onto_stack:
call_subroutine:
return_from_interrupt:
;-----------------------------------------------------------------------------
; Conditional jump instructions
;-----------------------------------------------------------------------------
jump_not_equal_zero:
jump_equal_zero:
jump_no_carry:
jump_if_carry:
jump_if_negative:
jump_greater_or_equal:
jump_less_than:
jump_unconditional:
;-----------------------------------------------------------------------------
; Conditional jump instructions
;-----------------------------------------------------------------------------
move_op:
add_op:
addc_op:
subc_op:
sub_op:
compare_op:
dadd_op:
bit_op:
bit_clear_op:
bit_set_op:
xor_op:
and_op:
illegal_operation:
	; TODO: add code to print out error message
	branch ucode_panic

.microcode
; A jump table
single_operand_arithmetic_table:
	.word rotate_right_carry:
	.word swap_bytes:
	.word rotate_right_arithmetic:
	.word sign_extend_byte_to_word:
	.word push_onto_stack:
	.word call_subroutine:
	.word return_from_interrupt:
	.word illegal_operation:

conditional_jump_table:
	.word jump_not_equal_zero:
	.word jump_equal_zero:
	.word jump_no_carry:
	.word jump_if_carry:
	.word jump_if_negative:
	.word jump_greater_or_equal:
	.word jump_less_than:
	.word jump_unconditional:

two_operand_arithmetic_jump_table:
	; first four cells will never be called due to how the encoding is setup
	.word illegal_operation:
	.word illegal_operation:
	.word illegal_operation:
	.word illegal_operation:
	.word move_op:
	.word add_op:
	.word addc_op:
	.word subc_op:
	.word sub_op:
	.word compare_op:
	.word dadd_op:
	.word bit_op:
	.word bit_clear_op:
	.word bit_set_op:
	.word xor_op:
	.word and_op:
